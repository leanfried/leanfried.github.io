!function(t) {
    "function" == typeof define && define.amd ? define("mapchart", t) : t()
}((function() {
    "use strict";
    function t(t) {
        if (/^#[0-9A-F]{6}$/i.test(t))
            return t;
        function e(t) {
            return ("0" + parseInt(t).toString(16)).slice(-2)
        }
        return "#" + e((t = t.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/))[1]) + e(t[2]) + e(t[3])
    }
    function e(t, e) {
        return t.match(RegExp(".{1," + e + "}(\\s|$)", "g"))
    }
    function n() {
        return $("#legend-table tr").length - 1
    }
    function o(t) {
        return -1 == IGNORED_PATHS.indexOf(t)
    }
    function a() {
        return $("#map>path").filter((function() {
            return o(this.id)
        }
        ))
    }
    function i() {
        if (/iP(hone|od|ad)/.test(navigator.platform)) {
            let t = document.getElementById("canvas1").width
              , e = document.getElementById("canvas1").height;
            document.getElementById("canvas1").width = t / 2,
            document.getElementById("canvas1").height = e / 2,
            conf.img2x = conf.img2x / 2,
            conf.img2y = conf.img2y / 2,
            conf.img3x = conf.img3x / 2 - 40,
            conf.img3y = conf.img3y / 2
        }
        jQuery.fn.outerHTML = function() {
            return jQuery("<div />").append(this.eq(0).clone()).html()
        }
        ,
        jQuery.fn.setFill = function(t) {
            return jQuery(this).attr("fill", t).css("fill", t)
        }
        ,
        jQuery.fn.getFill = function() {
            let e = jQuery(this).attr("fill") || t(jQuery(this).css("fill"));
            return -1 !== e.indexOf("url") ? e.match(/\(#([^)]+)\)/)[1] : e
        }
        ,
        jQuery.fn.setStroke = function(t) {
            return jQuery(this).attr("stroke", t).css("stroke", t)
        }
        ,
        jQuery.fn.getStroke = function() {
            return jQuery(this).attr("stroke") || t(jQuery(this).css("stroke"))
        }
        ,
        $(window).on("load", (function() {
            $(".loader").fadeOut("very slow")
        }
        )),
        -1 === window.location.host.indexOf("localhost") && window.addEventListener("beforeunload", (function(t) {
            if (function() {
                if ($("#legend-table tr").length > 1)
                    return !0;
                return !1
            }()) {
                var e = "It looks like you have been editing something. If you leave before saving, your changes will be lost.";
                return (t || window.event).returnValue = e,
                e
            }
        }
        ))
    }
    function r(t) {
        return t.length > 7
    }
    function l(t, e, n) {
        return `${t}_${e.replace("#", "")}_${n.replace("#", "")}`
    }
    function s(t) {
        let e = t.split("_");
        return {
            pType: e[0],
            bg: "#" + e[1],
            top: "#" + e[2]
        }
    }
    function c(t) {
        return `url(#${t})`
    }
    function d(t, e, n) {
        let o = l(t = t || $(".selectedPattern select").val(), e = e || $("#bgPatternPicker").spectrum("get").toString(), n = n || $("#topPatternPicker").spectrum("get").toString())
          , a = $("#" + t).clone().prop({
            id: o
        });
        a.children()[0].setAttribute("fill", e),
        -1 === ["diagonal1", "diagonal3", "crosshatch"].indexOf(t) ? a.children()[1].setAttribute("fill", n) : a.children()[1].setAttribute("stroke", n),
        $("#previewPatternSVG defs").append(a),
        $("#previewPatternSVG .previewPatternRect").attr("fill", c(o))
    }
    let p = {}
      , g = 0
      , h = [];
    function f(t) {
        return -1 !== h.indexOf(t)
    }
    function u() {
        return p
    }
    function m() {
        for (let t of h)
            $("#" + t).toggle()
    }
    function b() {
        let t = {
            groups: {},
            title: $("#map-title").val(),
            hidden: h,
            background: $("#backgroundpicker").spectrum("get").toString(),
            borders: $("#borderpicker").spectrum("get").toString(),
            legendFont: $("#legend-font").val(),
            legendFontColor: $("#legendfontcolorpicker").spectrum("get").toString(),
            legendBgColor: $("#legendbgpicker").spectrum("get").toString()
        };
        for (let e in p) {
            let n = p[e].div
              , o = n.match(/\d/g);
            o = o.join(""),
            t.groups[e] = {
                div: n,
                label: $("#label" + o).val(),
                paths: p[e].paths
            }
        }
        return JSON.stringify(t)
    }
    function v(t, e) {
        let n = $("#" + e)
          , o = n.getFill();
        if (-1 !== h.indexOf(e) && y(e),
        r(o))
            return $("#info-tooltip").html("Please Right-click -> Remove Pattern first.").css("background-color", "yellow"),
            void setTimeout((function() {
                $("#info-tooltip").css("background-color", "#fff")
            }
            ), 2e3);
        n.setFill(t),
        $("#no-borders").is(":checked") || n.setStroke(t),
        S(t, e),
        C(o, e)
    }
    function w(e) {
        let n = $(e).closest("tr").find("div")
          , o = n.attr("data-patternId") || t(n.css("background-color"));
        p[o].paths.forEach((function(t) {
            $("#" + t).setFill(DEFAULT_COLOR),
            $("#no-borders").is(":checked") || $("#" + t).setStroke(DEFAULT_COLOR)
        }
        )),
        E(o)
    }
    function k(t) {
        let e = $("#" + t)
          , n = e.getFill();
        if (r(n))
            return $("#info-tooltip").html("Please Right-click -> Remove Pattern first.").css("background-color", "yellow"),
            void setTimeout((function() {
                $("#info-tooltip").css("background-color", "#fff")
            }
            ), 2e3);
        n !== DEFAULT_COLOR && (e.setFill(DEFAULT_COLOR),
        $("#no-borders").is(":checked") || e.setStroke(DEFAULT_COLOR),
        C(n, t))
    }
    function y(t) {
        let e = $("#" + t)
          , n = {
            fill: DEFAULT_COLOR,
            "stroke-dasharray": "none"
        };
        e.css(n).attr(n),
        h.splice(h.indexOf(t), 1)
    }
    function P(t) {
        let e = $("#" + t)
          , n = e.getFill()
          , o = {
            fill: "#ffffff",
            "stroke-dasharray": "1,5"
        };
        e.css(o).attr(o),
        h.push(t),
        C(n, t)
    }
    function x(t, e, n, o) {
        $("#undo-clear").hide("slow");
        let a = $("#" + t)
          , i = a.getFill()
          , r = l(e, n, o)
          , s = c(r)
          , d = $("#" + r).clone();
        $("#map defs").append(d),
        PATTERNS.push(d.outerHTML()),
        a.setFill(s);
        let h = function(t) {
            let e = $("#" + t)
              , n = e.html().replace(/\s\s+/g, " ")
              , o = e.attr("width")
              , a = e.attr("height");
            return `url("data:image/svg+xml;base64,${btoa(`<svg xmlns="http://www.w3.org/2000/svg" width="${o}" height="${a}">${n}</svg>`)}")`
        }(r);
        r in p ? (p[r].count++,
        p[r].paths.push(t)) : ($("#legend-table-body").append(`<tr><td> <div data-patternId="${r}" class="legend-box" id="box${g}"> </div> </td><td> <input type="text" class="form-control" tabindex=${g + 1} id="label${g}" style="height:20px; width:100%;"> </input> </td><td style="text-align:center"> <button  class="btn btn-new btn-newC btn-xs" type="button" onclick="mapchart.removeLegendRow(this)" ><i class="fa fa-times"></i></button></td></tr>`),
        $("#box" + g).css({
            "background-image": h,
            "background-repeat": "repeat"
        }),
        p[r] = {
            count: 1,
            div: "#box" + g,
            paths: [t]
        },
        g++),
        C(i, t)
    }
    function S(e, o) {
        e in p ? (p[e].count++,
        p[e].paths.push(o)) : ($("#legend-table-body").append(`<tr><td> <div class="legend-box" id="box${g}"> </div> </td><td> <input type="text" class="form-control" tabindex=${g + 1} id="label${g}" style="height:20px; width:100%;"> </input> </td><td style="text-align:center"> <button class="btn btn-new btn-newC btn-xs" type="button" onclick="mapchart.removeLegendRow(this)" ><i class="fa fa-times"></i></button></td></tr>`),
        $("#box" + g).css({
            "background-color": e
        }),
        p[e] = {
            count: 1,
            div: "#box" + g,
            paths: [o]
        },
        50 === n() && $("#legend-area").prepend('<div class="alert alert-warning alert-dismissible" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><strong>Warning!</strong> Having more than 50 legend entries may crash your browser when previewing your map. <strong>Please consider hiding the legend or showing only its title.</strong></div>'),
        $("#box" + g).spectrum({
            color: e,
            showInput: !0,
            showPalette: !0,
            palette: PALETTE,
            showPaletteOnly: !0,
            togglePaletteOnly: !0,
            hideAfterPaletteSelect: !0,
            containerClassName: `box${g}-container`,
            maxSelectionSize: 18,
            preferredFormat: "hex",
            change: function(e) {
                let n = t($(this).css("background-color"))
                  , o = e;
                $(this).css("background-color", o),
                $("#fillpicker").spectrum("set", o),
                p[n].paths.forEach((function(t) {
                    $("#" + t).setFill(o)
                }
                )),
                p[o] = {
                    count: p[n].count,
                    div: "#" + $(this).attr("id"),
                    paths: p[n].paths
                },
                delete p[n]
            },
            show: function(t) {
                for (let t in p)
                    $(`.${this.id}-container .sp-palette-container span.sp-thumb-el[title="${t}"]`).addClass("sp-thumb-active")
            }
        }),
        g++)
    }
    function C(t, e) {
        if (t in p) {
            p[t].count--;
            let n = p[t].paths.indexOf(e);
            p[t].paths.splice(n, 1),
            0 === p[t].count && E(t)
        }
    }
    function E(t) {
        let e = p[t].div;
        $(e).parent().parent().remove(),
        delete p[t]
    }
    function O(t) {
        t.click((function(t) {
            T(t.target)
        }
        )),
        t.mouseover((function(t) {
            !function(t, e) {
                if (t && "path" === t.nodeName) {
                    let n = t.id
                      , a = $(t);
                    if (!o(n))
                        return;
                    if (e.ctrlKey && e.shiftKey)
                        a.removeClass("cursor-bucket").addClass("cursor-eraser"),
                        k(n);
                    else if (e.ctrlKey) {
                        a.addClass("cursor-bucket").removeClass("cursor-eraser"),
                        v($("#fillpicker").spectrum("get"), n)
                    }
                    let i = a.attr("stroke-width") || parseFloat(a.css("stroke-width"));
                    a.attr("stroke-width", 2 * i).css("stroke-width", 2 * i)
                }
            }(t.target, t)
        }
        )),
        t.mousemove((function(t) {
            !function(t, e) {
                if (t && "path" === t.nodeName) {
                    let n = t.id;
                    if (!o(n))
                        return;
                    let a = $("#info-tooltip");
                    const i = e.clientX
                      , r = e.clientY
                      , l = $("#map").width()
                      , s = $("#map").height()
                      , c = a.width()
                      , d = a.height();
                    a.html(n.replace(/_/g, " ")),
                    l - i > c ? a.css({
                        left: i + 15
                    }) : l - i > c / 2 ? a.css({
                        left: i - c / 2 + 15
                    }) : a.css({
                        left: i - c - 15
                    }),
                    s - r > d ? a.css({
                        top: r + 15
                    }) : s - r > d / 2 ? a.css({
                        top: r - d / 2 + 15
                    }) : a.css({
                        top: r - d - 15
                    }),
                    a.show()
                }
            }(t.target, t)
        }
        )),
        t.mouseout((function(t) {
            !function(t) {
                if (t && "path" === t.nodeName) {
                    let e = t.id
                      , n = $(t);
                    if (!o(e))
                        return;
                    n.removeClass("cursor-bucket cursor-eraser");
                    let a = n.attr("stroke-width") || parseFloat(n.css("stroke-width"));
                    n.attr("stroke-width", a / 2).css("stroke-width", a / 2),
                    $("#info-tooltip").hide()
                }
            }(t.target)
        }
        )),
        $.contextMenu({
            selector: "#map>path",
            className: "data-title",
            events: A,
            items: F
        })
    }
    function T(t) {
        if (t && "path" === t.nodeName) {
            $("#undo-clear").hide("slow");
            let e = t.id;
            if (!o(e))
                return;
            if ("usa-counties" === PAGE && -1 === e.indexOf("_"))
                return;
            v($("#fillpicker").spectrum("get"), e)
        }
    }
    let A = {
        show: function(t) {
            $("#context-menu-layer").remove(),
            $(".data-title").attr("data-menutitle", t.$trigger.attr("id").replace(/_/g, " "));
            let e, n = t.$trigger.attr("id"), o = $("#" + n).getFill();
            e = r(o) ? s(o) : {
                bg: o,
                pType: "circles3",
                top: "#000000"
            },
            $("#bgPatternPicker").spectrum({
                color: e.bg,
                showInput: !0,
                showPalette: !0,
                palette: PALETTE,
                showPaletteOnly: !0,
                togglePaletteOnly: !0,
                hideAfterPaletteSelect: !0,
                preferredFormat: "hex",
                maxSelectionSize: 18,
                containerClassName: "bgPatternPicker-container",
                change: function() {
                    d()
                },
                show: function() {
                    $(`.bgPatternPicker-container .sp-palette-container span.sp-thumb-el[title="${$("#bgPatternPicker").spectrum("get").toString()}"]`).addClass("sp-thumb-active")
                }
            }),
            $("#topPatternPicker").spectrum({
                color: e.top,
                showInput: !0,
                showPalette: !0,
                palette: PALETTE,
                showPaletteOnly: !0,
                togglePaletteOnly: !0,
                hideAfterPaletteSelect: !0,
                preferredFormat: "hex",
                maxSelectionSize: 18,
                containerClassName: "topPatternPicker-container",
                change: function() {
                    d()
                },
                show: function() {
                    $(`.topPatternPicker-container .sp-palette-container span.sp-thumb-el[title="${$("#topPatternPicker").spectrum("get").toString()}"]`).addClass("sp-thumb-active")
                }
            }),
            $(".selectedPattern select").val(e.pType),
            t.inputs.patternSelect.selected = e.pType,
            d(),
            function(t) {
                let e = $("#legend-table-body>tr>td>div[data-patternId]").clone()
                  , n = []
                  , o = $("#" + t);
                for (let a = 0, i = e.length; a < i; a++) {
                    let i = $(e[a])
                      , r = i.prop("id").replace("box", "usedPatternBox");
                    i.prop({
                        id: r
                    }).addClass("used-pattern-box"),
                    i.on("click", (function() {
                        let e = s($(this).attr("data-patternId"));
                        x(t, e.pType, e.bg, e.top),
                        o.contextMenu("hide")
                    }
                    )),
                    n.push(i)
                }
                $(".existing-patterns").html(n)
            }(n)
        }
    }
      , F = {
        removeColor: {
            name: "Remove Color",
            icon: "fa-eraser",
            callback: function(t, e) {
                k(e.$trigger.attr("id"))
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id")
                  , a = e.$trigger.getFill();
                if (f(n) || !o(n) || r(a) || a === DEFAULT_COLOR)
                    return !0
            }
        },
        sep1: "---------",
        addPattern: {
            name: "Add/Modify Pattern",
            icon: "fa-th",
            className: "pattern-holder",
            items: {
                bgColor: {
                    name: "                    ",
                    type: "html",
                    className: "",
                    html: "<span>Background Color: </span> <input id='bgPatternPicker' type='text' class='form-control' />"
                },
                patternColor: {
                    name: "                    ",
                    type: "html",
                    className: "",
                    html: "<span>Pattern Color: </span> <input id='topPatternPicker' type='text' class='form-control' />"
                },
                patternSelect: {
                    name: "Pattern Type: ",
                    type: "select",
                    className: "selectedPattern",
                    selected: "circles3",
                    options: {
                        circles3: "Dots",
                        diagonal1: "Diagonal Stripes Light",
                        diagonal3: "Diagonal Stripes Thick",
                        vertical1: "Vertical Stripes Light",
                        vertical3: "Vertical Stripes Thick",
                        horizontal1: "Horizontal Stripes Light",
                        horizontal3: "Horizontal Stripes Thick",
                        crosshatch: "Crosshatch",
                        texture: "Texture",
                        subtlepatch: "Subtle Patch",
                        checkers: "Checkers",
                        raindrops: "Raindrops"
                    },
                    events: {
                        change: function() {
                            d()
                        }
                    }
                },
                sep4: "---------",
                preview: {
                    name: "",
                    type: "html",
                    className: "preview-pattern",
                    html: '<svg height="30" version="1.1" width="100" xmlns="http://www.w3.org/2000/svg" style="overflow: hidden;" id="previewPatternSVG"><defs></defs><rect class="previewPatternRect" height="30" width="100"></rect> </svg>'
                },
                sep5: "---------",
                confirmPattern: {
                    name: "Paint with Pattern",
                    className: "pattern-button",
                    callback: function(t, e) {
                        let n = $(".selectedPattern select").val()
                          , o = $("#bgPatternPicker").spectrum("get").toString()
                          , a = $("#topPatternPicker").spectrum("get").toString();
                        x(e.$trigger.attr("id"), n, o, a)
                    }
                }
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id");
                if (f(n) || !o(n))
                    return !0
            }
        },
        copyPattern: {
            name: "Copy Existing Pattern",
            icon: "fa-clone",
            className: "existing-patterns-menu",
            items: {
                existingPatternUtils: {
                    name: "                    ",
                    type: "html",
                    html: "",
                    className: "existing-patterns"
                }
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id");
                if (f(n) || !o(n) || 0 === $("#legend-table-body>tr>td>div[data-patternId]").length)
                    return !0
            }
        },
        removePattern: {
            name: "Remove Pattern",
            icon: "fa-square",
            callback: function(t, e) {
                !function(t) {
                    let e = $("#" + t)
                      , n = e.getFill()
                      , o = s(n);
                    e.setFill(o.bg),
                    S(o.bg, t),
                    C(n, t)
                }(e.$trigger.attr("id"))
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id")
                  , a = e.$trigger.getFill();
                if (f(n) || !o(n) || !r(a))
                    return !0
            }
        },
        sep2: "---------",
        showPath: {
            name: "Show",
            icon: "fa-eye",
            callback: function(t, e) {
                y(e.$trigger.attr("id"))
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id");
                if (!f(n) || !o(n))
                    return !0
            }
        },
        hidePath: {
            name: "Hide",
            icon: "fa-eye-slash",
            callback: function(t, e) {
                P(e.$trigger.attr("id"))
            },
            disabled: function(t, e) {
                let n = e.$trigger.attr("id");
                if (f(n) || !o(n))
                    return !0
            }
        },
        sep3: "---------",
        info: {
            name: "*Hidden elements will not appear on the final map.",
            className: "context-info",
            disabled: !0
        }
    }
      , I = "show";
    function L() {
        return I
    }
    function R() {
        $("#legend-status").change((function() {
            I = this.value,
            "title" === I ? ($("#legend-table").css("opacity", .3),
            $("#map-title").attr("disabled", !1)) : "hide" === I ? ($("#legend-table").css("opacity", .3),
            $("#map-title").attr("disabled", !0)) : ($("#legend-table").css("opacity", 1),
            $("#map-title").attr("disabled", !1))
        }
        )),
        $("#isolate-state").click((function() {
            isolateState($("#state-to-isolate").val())
        }
        )),
        $("#restore-states").click((function() {
            restoreStates()
        }
        )),
        $("#startZoom").click((function() {
            !function() {
                $("#showSvgControls, #svgControls").toggle(),
                $("#mapContainer").css("border", "1px dashed #f78f1e");
                var t = new $.SvgZoomer($("#map"),{
                    maxZoomLevel: 10,
                    adjustStrokeWidths: !0
                });
                mapchart.zoomTool = t
            }()
        }
        )),
        $("#exitZoom").click((function() {
            $("#showSvgControls, #svgControls").toggle(),
            $("#mapContainer").css("border", ""),
            mapchart.zoomTool.stop()
        }
        )),
        $("#resetZoom").click((function() {
            $("#showSvgControls, #svgControls").toggle(),
            $("#mapContainer").css("border", ""),
            mapchart.zoomTool.reset()
        }
        )),
        $("#legend-table-body").sortable(),
        $(".draggable").draggable({
            scroll: !0,
            handle: "span#colorpicker-drag-handle",
            snap: "#colorpicker-row, #mapContainer",
            start: function() {
                $(this).addClass("moving-draggable"),
                $("#colorpicker-row").addClass("draggable-origin")
            },
            stop: function(t, e) {
                var n = $(this).data("ui-draggable").snapElements
                  , o = $.map(n, (function(t) {
                    return t.snapping ? t.item.id : null
                }
                ));
                1 === o.length && o.includes("colorpicker-row") && ($(this).removeClass("moving-draggable"),
                $("#colorpicker-row").removeClass("draggable-origin"))
            }
        }),
        $("#legend-table-body").mouseover((function(t) {
            if (-1 !== t.target.id.indexOf("box")) {
                let e = "#" + t.target.id
                  , n = u();
                for (let t in n)
                    if (n[t].div === e) {
                        let o = n[t].count;
                        t.length > 7 ? $(e).attr("data-tooltip", o + " items with this pattern.") : $(e).attr("data-tooltip", `${o} items with color ${t}. Click to change.`)
                    }
            }
        }
        ));
        const t = $('<div id="info-tooltip">');
        $("#rsr").append(t),
        $("#no-borders").change((function() {
            if (this.checked) {
                let t = $("#borderpicker").spectrum("get").toString();
                a().each((function() {
                    $(this).setStroke(t)
                }
                ))
            } else
                a().each((function() {
                    let t = $(this).getFill();
                    $(this).setStroke(t)
                }
                ))
        }
        )),
        $(".btn-new").mouseover((function() {
            $(this).css("color", $(this).css("background-color"))
        }
        )).mouseout((function() {
            $(this).css("color", "white")
        }
        )),
        $("#download, #undo-clear").hide(),
        $("#isolate-alert, #color-many-alert").hide(),
        $("#isolate-alert, #color-many-alert").on("closed.bs.alert", (function() {
            $(this).html("")
        }
        )),
        $("#map-title").keydown((function(t) {
            13 == t.which && t.preventDefault()
        }
        ));
        let e = $("#legend-font")
          , n = IS_SAFARI ? "Lucida" : "Century Gothic";
        for (let t in FONT_STYLES) {
            let o = $("<option>");
            o.html(t).val(t).css("font-family", FONT_STYLES[t]),
            e.append(o),
            e.val(n).css("font-family", FONT_STYLES[n])
        }
        e.change((function() {
            $(this).css("font-family", FONT_STYLES[$(this).val()])
        }
        ))
    }
    var _ = new function() {
        let l = this;
        function f(t) {
            l.$svg = t,
            l.svg = t[0],
            l.$paths = $("#map>path"),
            l.$vPaths = a(),
            conf.originalSVGH = parseInt(t.attr("height"));
            let e = l.svg.namespaceURI
              , n = l.svg.querySelector("defs") || l.svg.insertBefore(document.createElementNS(e, "defs"), l.svg.firstChild);
            for (let t of PATTERNS) {
                let e = $.parseHTML(`<svg>${t}</svg>`)[0].firstChild;
                $(n).append(e)
            }
            $("#canvas1").attr({
                width: conf.canvasW,
                height: conf.canvasH
            }),
            O(l.$svg)
        }
        function S() {
            m(),
            $("#canvas1").hide(),
            $("#map").show();
            let t = document.getElementById("canvas1");
            t.getContext("2d").clearRect(0, 0, t.width, t.height),
            $("#canvas1").attr("height", conf.canvasH),
            l.$svg.attr("height", conf.originalSVGH),
            $("#edit").prop("disabled", !0).css("color", "white"),
            $("#convert, #clear, #downup").prop("disabled", !1),
            $("#download").hide("slow")
        }
        function C() {
            l.lastConfig = b(),
            l.$vPaths.each((function() {
                y($(this).attr("id")),
                $(this).setStroke("#000000")
            }
            ));
            let t = document.getElementById("canvas1");
            t.getContext("2d").clearRect(0, 0, t.width, t.height),
            $("#canvas1").attr("height", conf.canvasH),
            l.$svg.attr("height", conf.originalSVGH),
            $("#legend-table-body").empty(),
            l.$svg.css("background-color", "#fff"),
            $("#backgroundpicker").spectrum("set", "#fff"),
            $("#borderpicker").spectrum("set", "#000000"),
            $("#map-title").val(""),
            $("#edit").prop("disabled", !0),
            $("#convert, #clear, #downup").prop("disabled", !1),
            $("#undo-clear").show("slow"),
            p = {},
            g = 0,
            h = []
        }
        function E(t) {
            C(),
            $("#undo-clear").hide();
            let e = JSON.parse(t);
            $("#map-title").val(e.title),
            $("#borderpicker").spectrum("set", e.borders),
            l.$vPaths.each((function() {
                $(this).setStroke(e.borders)
            }
            ));
            let n = [];
            if (l.$vPaths.each((function() {
                n.push($(this).attr("id"))
            }
            )),
            e.background && (l.$svg.css("background-color", e.background),
            $("#backgroundpicker").spectrum("set", e.background)),
            e.legendFontColor && $("#legendfontcolorpicker").spectrum("set", e.legendFontColor),
            e.legendBgColor && $("#legendbgpicker").spectrum("set", e.legendBgColor),
            e.legendFont && $("#legend-font").val(e.legendFont),
            e.hidden) {
                let t = e.hidden;
                for (let e of t)
                    P(e)
            }
            let o = 0;
            for (let t in e.groups) {
                let a = e.groups[t].paths
                  , i = a.length;
                for (let e = 0; e < i; e++) {
                    let o = a[e];
                    if (AMENDED_IDS[o] && (o = AMENDED_IDS[o]),
                    n.includes(o))
                        if (r(t)) {
                            let e = s(t);
                            d(e.pType, e.bg, e.top),
                            x(o, e.pType, e.bg, e.top)
                        } else
                            $("#fillpicker").spectrum("set", t),
                            v(t, o);
                    else
                        console.error(`Could not restore: ${o} on the map. Please contact me and I can check it out!`)
                }
                $("#label" + o).val(e.groups[t].label),
                o++
            }
            $("#undo-clear").show(),
            $("#uploadModal").hide()
        }
        function A() {
            0 == $(".loader-map").length && $("#mapContainer").prepend($('<div class="loader-map"></div>')),
            $(".loader-map").show(),
            m();
            let o = L()
              , a = $("#legendbgpicker").spectrum("get").toString()
              , i = FONT_STYLES[$("#legend-font").val()]
              , r = $("#legendfontcolorpicker").spectrum("get").toString()
              , s = self.URL || self.webkitURL || self
              , d = $("#canvas1").attr("height") - conf.img2y
              , p = new Image
              , g = new Image
              , h = new Image
              , f = 0
              , u = 0
              , b = 52 + 5 * conf.legendFactor
              , v = 56 + 5 * conf.legendFactor
              , w = 30 + 5 * conf.legendFactor
              , k = 66 + 5 * conf.legendFactor
              , y = 0
              , P = 0
              , x = 95 + 5 * conf.legendFactor
              , S = 75 + 5 * conf.legendFactor
              , C = []
              , E = ""
              , O = "";
            if ("hide" !== o) {
                let p = `<text x="30" y="100" font-size="${v}" font-weight="bold" overflow="hidden">`
                  , h = e($("#map-title").val().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"), w - 4);
                if (null === h)
                    p += '<tspan x="30" dy="0"> </tspan>',
                    y += 1;
                else
                    for (let t = 0; t < h.length; t++)
                        0 === t ? (p += `<tspan x="30" dy="0">${h[t]}</tspan>`,
                        y += 1) : (p += `<tspan x="30" dy="${S}">${h[t]}</tspan>`,
                        P += 1);
                if (p += "</text>",
                O += p,
                "show" == o) {
                    let o = 0
                      , a = n();
                    for (let n = 1; n <= a; n++) {
                        let a = $(`#legend-table tr:eq(${n}) > td:eq(0) > div:eq(0)`)
                          , i = y * x + P * S + 80
                          , r = `<rect style="fill:${a.attr("data-patternId") ? c(a.attr("data-patternId")) : t(a.css("background-color"))};opacity:1;color:#000000;fill-opacity:1;stroke:#000000;stroke-width:1;stroke-opacity:1;" width="${k}" height="${k}" x="20" y="${i}"/>`
                          , l = $(`#legend-table tr:eq(${n}) > td:eq(1) input`).val().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                        o = i + 45 + 5 * conf.legendFactor;
                        let s = `<text x="130" y="${o}" font-size="${b}" overflow="hidden">`;
                        if (h = e(l, w),
                        null === h)
                            s += '<tspan x="130" dy="0"> </tspan>',
                            y += 1;
                        else
                            for (let t = 0; t < h.length; t++)
                                0 === t ? (s += `<tspan x="130" dy="0">${h[t]}</tspan>`,
                                y += 1) : (s += `<tspan x="130" dy="${S}">${h[t]}</tspan>`,
                                P += 1);
                        s += "</text>",
                        E += r,
                        E += s
                    }
                }
                if (u = y * x + P * S + 100,
                f = u - d,
                f > 0) {
                    let t = parseInt($("#canvas1").attr("height"))
                      , e = parseInt(l.$svg.attr("height").match(/\d+/)[0])
                      , n = t / e;
                    $("#canvas1").attr("height", t + f);
                    let o = f / n;
                    l.$svg.attr("height", e + o)
                } else
                    f = 0;
                C = PATTERNS.map((function(t) {
                    return t.replace("userSpaceOnUse", 'userSpaceOnUse" patternTransform="scale(2)')
                }
                ));
                let m = [1e3, 1200, 1400, 1600, 1800, 2e3]
                  , T = `<svg xmlns="http://www.w3.org/2000/svg" width="${"Consolas" === $("#legend-font").val() ? m[conf.legendFactor] + 100 : m[conf.legendFactor]}" height="${u}"><defs>${C.join("")}</defs><rect rx="25" ry="25" width="100%" height="100%" fill="${a}"/><g font-family="${i}" fill="${r}">${O} ${E}</g></svg>`
                  , A = "data:image/svg+xml," + T;
                if (IS_SAFARI)
                    g.src = A;
                else {
                    let t = new Blob([T],{
                        type: "image/svg+xml;charset=utf-8"
                    })
                      , e = s.createObjectURL(t);
                    g.src = e
                }
            }
            let T = (new XMLSerializer).serializeToString(document.querySelector("#map"))
              , A = "data:image/svg+xml," + T
              , F = document.getElementById("canvas1")
              , I = F.getContext("2d");
            if (IS_SAFARI)
                p.src = A;
            else {
                let t = new Blob([T],{
                    type: "image/svg+xml;charset=utf-8"
                })
                  , e = s.createObjectURL(t);
                p.src = e
            }
            let R = 37 + 5 * conf.legendFactor
              , _ = `<svg xmlns="http://www.w3.org/2000/svg" width="2000" height="150"><text x="90" y="50" fill="${$("#backgroundpicker").spectrum("get").toHsl().l > .5 ? "#000" : "#fff"}" font-size="${R}" font-weight="bold" overflow="hidden" font-family="Century Gothic,Segoe UI,Lucida Grande">Created with ${WEBSITE} </text></svg>`
              , N = "data:image/svg+xml," + _;
            if (IS_SAFARI)
                h.src = N;
            else {
                let t = new Blob([_],{
                    type: "image/svg+xml;charset=utf-8"
                })
                  , e = s.createObjectURL(t);
                h.src = e
            }
            p.onload = function() {
                I.fillStyle = $("#backgroundpicker").spectrum("get").toString(),
                I.fillRect(0, 0, F.width, F.height),
                I.drawImage(p, 0, 0, F.width, F.height),
                "hide" !== o ? (I.drawImage(g, conf.img2x, conf.img2y),
                I.drawImage(h, conf.img3x, conf.img3y + f)) : I.drawImage(h, conf.img3x, conf.img3y);
                F.toDataURL("image/png");
                $(".loader-map").hide()
            }
            ,
            $("#canvas1, #map").toggle(),
            $("#undo-clear").hide(),
            $("#edit").prop("disabled", !1),
            $("#convert, #clear, #downup").prop("disabled", !0).css("color", "#fff"),
            $("#download").show("slow")
        }
        return l.lastConfig = {},
        i(),
        async function(t) {
            let e = Math.floor(9e4 * Math.random()) + 1e4;
            const n = await fetch("svg/" + t + ".svg?v=" + e, {
                cache: "reload"
            })
              , o = await n.text();
            let i = $(o);
            i.length > 1 && (i = $(i[i.length - 1]));
            let r = `0 0 ${i.attr("width")} ${i.attr("height")}`;
            i.attr({
                id: "map",
                viewBox: r,
                preserveAspectRatio: "xMinYMin"
            }),
            $("#rsr").append(i),
            f(i),
            function() {
                $("#download").click((function() {
                    !function(t, e) {
                        const n = document.getElementById("canvas1").toDataURL("image/png")
                          , o = function(t) {
                            let e = t.split(",")
                              , n = e[0].match(/:(.*?);/)[1]
                              , o = atob(e[1])
                              , a = o.length
                              , i = new Uint8Array(a);
                            for (; a--; )
                                i[a] = o.charCodeAt(a);
                            return new Blob([i],{
                                type: n
                            })
                        }(n)
                          , a = URL.createObjectURL(o);
                        let i = $("#map-title").val();
                        $.browser.msie ? t.download = i ? i.replace(/\W/g, "_") + ".png" : "MapChart_Map.png" : t.download = i ? i.replace(/\W/g, "_") : "MapChart_Map";
                        t.href = a,
                        /iP(hone|od|ad)/.test(navigator.platform) && (t.href = n)
                    }(this)
                }
                )),
                $("#convert").click((function() {
                    A()
                }
                )),
                $("#edit").click((function() {
                    S()
                }
                )),
                $("#clear").click((function() {
                    C()
                }
                )),
                $("#undo-clear").click((function() {
                    E(l.lastConfig),
                    $("#undo-clear").toggle("slow")
                }
                )),
                $("#save-config").click((function() {
                    let t = b();
                    this.href = "data:text/plain;charset=utf-8," + encodeURIComponent(t);
                    let e = "mapchartSave__" + PAGE + "__" + $("#map-title").val().substring(0, 32);
                    this.download = e.replace(/[^\w]/gi, "_") + ".txt"
                }
                )),
                $("#upload-config").click((function() {
                    E($("#uploadData").val())
                }
                )),
                R(),
                $("#fillpicker").spectrum({
                    color: "#cc3333",
                    showInput: !0,
                    showPalette: !0,
                    palette: PALETTE,
                    showPaletteOnly: !0,
                    togglePaletteOnly: !0,
                    hideAfterPaletteSelect: !0,
                    preferredFormat: "hex",
                    maxSelectionSize: 18,
                    containerClassName: "fillpicker-container",
                    show: function() {
                        for (let t in u())
                            $(`.fillpicker-container .sp-palette-container span.sp-thumb-el[title="${t}"]`).addClass("sp-thumb-active")
                    }
                }),
                $("#backgroundpicker").spectrum({
                    color: "#ffffff",
                    showInput: !0,
                    showPalette: !0,
                    palette: BG_PALETTE,
                    showPaletteOnly: !0,
                    togglePaletteOnly: !0,
                    showSelectionPalette: !0,
                    hideAfterPaletteSelect: !0,
                    showAlpha: !0,
                    preferredFormat: "hex",
                    containerClassName: "backgroundpicker-container",
                    change: function(t) {
                        $("#map").css("background-color", t)
                    },
                    show: function() {
                        $(`.backgroundpicker-container .sp-palette-container span.sp-thumb-el[title="${$("#backgroundpicker").spectrum("get").toString()}"]`).addClass("sp-thumb-active")
                    }
                }),
                $("#borderpicker").spectrum({
                    color: "#000",
                    showInput: !0,
                    showPalette: !0,
                    palette: BORDER_PALETTE,
                    showPaletteOnly: !0,
                    togglePaletteOnly: !0,
                    hideAfterPaletteSelect: !0,
                    preferredFormat: "hex",
                    containerClassName: "borderpicker-container",
                    change: function(t) {
                        a().each((function() {
                            $(this).css("stroke", t).attr("stroke", t)
                        }
                        ))
                    },
                    show: function() {
                        $(`.borderpicker-container .sp-palette-container span.sp-thumb-el[title="${$("#borderpicker").spectrum("get").toString()}"]`).addClass("sp-thumb-active")
                    }
                }),
                $("#legendbgpicker").spectrum({
                    color: "#00000000",
                    showInput: !0,
                    showPalette: !0,
                    palette: LEGEND_BG_PALETTE,
                    showPaletteOnly: !0,
                    togglePaletteOnly: !0,
                    hideAfterPaletteSelect: !0,
                    showAlpha: !0,
                    preferredFormat: "hex",
                    containerClassName: "legendbgpicker-container"
                }),
                void $("#legendfontcolorpicker").spectrum({
                    color: "#000000",
                    showInput: !0,
                    showPalette: !0,
                    palette: FONT_COLOR_PALETTE,
                    showPaletteOnly: !0,
                    togglePaletteOnly: !0,
                    hideAfterPaletteSelect: !0,
                    preferredFormat: "hex",
                    containerClassName: "legendfontcolorpicker-container",
                    show: function() {
                        $(`.legendfontcolorpicker-container .sp-palette-container span.sp-thumb-el[title="${$("#legendfontcolorpicker").spectrum("get").toString()}"]`).addClass("sp-thumb-active")
                    }
                }),
                $("#color-single").length && function() {
                    let t = new Set;
                    a().each((function() {
                        if (-1 === PAGE.indexOf("nuts") && "usa-congressional-districts" !== PAGE) {
                            let e = this.id.slice(-2);
                            t.add(e)
                        } else if (/\d/.test(this.id)) {
                            let e = this.id.substring(0, 2);
                            t.add(e)
                        }
                    }
                    ));
                    for (let e of [...t].sort()) {
                        let t = $("<option>");
                        -1 === PAGE.indexOf("usa") && -1 === PAGE.indexOf("canada") ? t.val(e).html(`${e} - ${COUNTRY_ABBREVIATIONS[e]}`) : t.val(e).html(`${e} - ${STATE_ABBREVIATIONS[e]}`),
                        $("#color-single-list").append(t)
                    }
                    $("#color-single").click((function() {
                        let t = $("#color-single-list").val()
                          , e = $("#fillpicker").spectrum("get");
                        a().each((function() {
                            -1 === PAGE.indexOf("nuts") && "usa-congressional-districts" !== PAGE ? this.id.slice(-2) === t && v(e, this.id) : this.id.substring(0, 2) === t && v(e, this.id)
                        }
                        ))
                    }
                    ))
                }();
                $("#color-many").length && $("#color-many").click((function() {
                    $("#color-many-alert").html("");
                    let t = $("#listToColor").val().toUpperCase().split(",");
                    t = $.map(t, $.trim);
                    let e = [];
                    a().each((function() {
                        let t = this.id.slice(-2);
                        -1 === e.indexOf(t) && e.push(t)
                    }
                    ));
                    let n = "";
                    for (let o = 0, a = t.length; o < a; o++)
                        -1 === e.indexOf(t[o]) && (n += t[o] + ", ");
                    if (n.length > 0)
                        n = n.slice(0, -2),
                        $("#color-many-alert").append(`<p><em>${n}</em> are not valid. Please input valid, comma-separated values.`).show();
                    else {
                        let e = $("#fillpicker").spectrum("get");
                        for (const n of t)
                            a().each((function() {
                                this.id.slice(-2) === n && v(e, this.id)
                            }
                            ));
                        $("#color-many-alert").hide()
                    }
                }
                ));
                $("#isolateFromList").length && ($("#isolateFromList").click((function() {
                    $("#isolate-alert").html("");
                    let t = $("#listToIsolate").val().toUpperCase().split(",");
                    t = $.map(t, $.trim);
                    let e = [];
                    a().each((function() {
                        let t = this.id.slice(-2);
                        -1 === e.indexOf(t) && e.push(t)
                    }
                    ));
                    let n = "";
                    for (let o = 0, a = t.length; o < a; o++)
                        -1 === e.indexOf(t[o]) && (n += t[o] + ", ");
                    n.length > 0 ? (n = n.slice(0, -2),
                    $("#isolate-alert").append(`<p><em>${n}</em> are not valid. Please input valid, comma-separated values.`).show()) : (a().each((function() {
                        let e = this.id.slice(-2);
                        -1 === t.indexOf(e) && $(this).hide()
                    }
                    )),
                    $("#isolateFromList").prop("disabled", !0).css("color", "#fff"),
                    $("#showAll").prop("disabled", !1).css("color", "#fff"),
                    $("#isolate-alert").hide())
                }
                )),
                $("#showAll").click((function() {
                    a().each((function() {
                        $(this).show()
                    }
                    )),
                    $("#isolateFromList").prop("disabled", !1).css("color", "#fff"),
                    $("#showAll").prop("disabled", !0).css("color", "#fff"),
                    $("#isolate-alert").hide()
                }
                )));
                $(".search-entity").length && function() {
                    let t = [];
                    a().each((function(e) {
                        let n, o, a = this.id, i = a.slice(-2);
                        i == i.toUpperCase() && i != i.toLowerCase() && -1 === PAGE.indexOf("nuts") ? (n = a.substring(0, a.length - 2),
                        o = n.replace(/_/g, " ") + " (" + i + ")") : (n = a,
                        o = n.replace(/_/g, " ")),
                        t.push({
                            id: e,
                            text: o,
                            original: a
                        })
                    }
                    )),
                    $(".search-entity").select2({
                        data: t,
                        placeholder: "Search for a subdivision..."
                    }),
                    $(".search-entity").on("select2:select", (function(t) {
                        let e = t.params.data.original;
                        $(this).data("selectedEntity", e)
                    }
                    )),
                    $("#color-from-search").click((function() {
                        let t = $(".search-entity").data("selectedEntity");
                        v($("#fillpicker").spectrum("get"), t)
                    }
                    )),
                    $("#uncolor-from-search").click((function() {
                        k($(".search-entity").data("selectedEntity"))
                    }
                    ))
                }()
            }(),
            "function" == typeof pageSpecificSetup && pageSpecificSetup()
        }(PAGE),
        {
            click: T,
            removeLegendRow: w,
            saveConfig: b,
            restoreConfig: E,
            edit: S,
            convert: A,
            colors: u,
            verifyPath: o,
            initializeMap: f
        }
    }
    ;
    window.mapchart = _
}
));
//# sourceMappingURL=sourcemaps/mapchart.min.js.map
